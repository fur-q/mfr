.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MFR 1"
.TH MFR 1 "2014-06-10" "" ""
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mfr \- multiple file renamer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
mfr [\-cxy] [\-l \s-1LUA\-SCRIPT\s0] [\-m \s-1MATCH\-PATTERN\s0] [\-r \s-1REPLACE\-STRING\s0] [\-s \s-1SOURCE\-FILE\s0] \s-1FILE\s0...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
mfr batch renames files using Lua patterns.
.PP
Replacement filenames may be derived from the original filenames, from lines in a text file specified by \fB\-\-source\fR, or from standard input.
.PP
If standard input is not a \s-1TTY\s0, it is assumed to contain a list of filenames. Other options which accept input on stdin must be entered interactively.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c, \-\-cautious\fR" 4
.IX Item "-c, --cautious"
Abort when an error is encountered, exiting with status 1.
.IP "\fB\-l, \-\-lua\-script=[\s-1FILE\s0]\fR" 4
.IX Item "-l, --lua-script=[FILE]"
Path to a Lua script, which must return a table or a function.
.Sp
The returned value will be used as the final argument to string.gsub\e() when matching against filenames.
.Sp
If the argument is \*(L"\-\*(R", match against lines from standard input.
.IP "\fB\-m, \-\-match=[\s-1PATTERN\s0]\fR" 4
.IX Item "-m, --match=[PATTERN]"
A Lua pattern to match the provided filenames against.
.Sp
Will be prompted for if not provided.
.IP "\fB\-r, \-\-replace=[\s-1STRING\s0]\fR" 4
.IX Item "-r, --replace=[STRING]"
A string to replace the match pattern with in the provided filenames.
.Sp
Will be ignored if \fB\-\-lua\-script\fR is specified. Will be prompted for if not specified or ignored.
.IP "\fB\-s, \-\-source=[\s-1FILE\s0]\fR" 4
.IX Item "-s, --source=[FILE]"
Match against lines from \s-1FILE\s0 instead of the original filenames. If there are fewer lines in \s-1FILE\s0 than filenames, stop matching when there are no lines left.
.Sp
If the argument is \*(L"\-\*(R", match against lines from standard input.
.IP "\fB\-x, \-\-no\-extensions\fR" 4
.IX Item "-x, --no-extensions"
Do not match against or replace file extensions.
.IP "\fB\-y, \-\-yes\fR" 4
.IX Item "-y, --yes"
Always answer yes at yes/no prompts.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
0: All files were renamed correctly.
.PP
1: One or more errors were encountered while renaming.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Matching against filenames"
.IX Subsection "Matching against filenames"
Rename file01.txt and file2.txt to repl01.txt and repl2.txt:
.PP
.Vb 1
\& $ mfr \-m "file(%d+).txt" \-r "repl%1.txt" file01.txt file2.txt
.Ve
.PP
This can be expressed more concisely with \-\-no\-extensions:
.PP
.Vb 1
\& $ mfr \-e \-m "file(%d+)" \-r "repl%1" file01.txt file2.txt
.Ve
.SS "Matching against a source file"
.IX Subsection "Matching against a source file"
Rename file01.txt and file2.txt to foo.txt and bar.txt:
.PP
.Vb 4
\& $ cat src.txt
\& foo
\& bar
\& $ mfr \-e \-s src.txt \-m "file(%d+)" \-r "^[^.+]" file01.txt file2.txt
.Ve
.SS "Replacing using a Lua script"
.IX Subsection "Replacing using a Lua script"
Rename file.lua and file.c to file01.lua and file02.c:
.PP
.Vb 6
\& $ cat func.lua
\& local x = 0
\& return function(s)
\&    x = x + 1; return string.format("%s%02d", s, x)
\& end
\& $ mfr \-e \-l func.lua \-m "file" file.lua file.c
.Ve
.SS "Providing filenames on standard input"
.IX Subsection "Providing filenames on standard input"
Sort some filenames by last modified date and rename them:
.PP
.Vb 1
\& $ ls \-t | mfr \-e \-m "(.+)" \-r "renamed_%1"
.Ve
.PP
This is particularly useful in conjunction with \-\-lua\-script.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Lua pattern reference: <http://www.lua.org/manual/5.1/manual.html#5.4.1>
.PP
Lua string.gsub reference: <http://www.lua.org/manual/5.1/manual.html#pdf-string.gsub>
